// SPDX-License-Identifier: GPL-3.0

pragma soliditypp >=0.8.0;

import "../node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract EnglishAuction {

    struct Bid {
        address bidder;
        uint amount;
    }

    struct Auction {
        address creator;
        uint startPrice;
        uint lastBlock;
        Bid highestBid;
        ERC721 subject;
        uint256 subjectTokenId;
    }

    uint internal auctionCounter = 0;

    mapping(uint => Auction) public auctions;

    event Start(ERC721 token, uint256 tokenId, uint startPrice, uint lastBlock);
    event Bid(uint auctionId, uint _amount);
    event Terminate(uint auctionId);

    function start(ERC721 _token, uint256 _tokenId, uint _startPrice, uint _lastBlock) public {
        Auction memory auction = Auction({
            creator: msg.sender,
            startPrice: _startPrice,
            lastBlock: _lastBlock,
            highestBid: Bid({
                bidder: msg.sender,
                amount: 0
            }),
            subject: _token,
            subjectTokenId: _subjectTokenId 
        });

        auctions[auctionCounter++] = auction;
        auction.subject.transferFrom(msg.sender, address(this), _subjectTokenId);

        emit Start(_token, _tokenId, _startPrice, _lastBlock);
    }

    function bid(uint _auctionId, uint _amount) public payable {
        
        emit Bid(_auctionId, _amount);
    }

    function terminate(uint _auctionId) public {
        emit Terminate(_auctionId);
    }
}